name: Monitor Cache Status
permissions:
  actions: read

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
    - name: Check cache status
      uses: actions/github-script@v7
      with:
        script: |
          const response = await github.rest.actions.getActionsCacheList({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const caches = response.data;
          const gameGridCaches = caches.actions_caches
            .filter(cache => cache.key.includes('game-grid-cache'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          console.log(`Total caches: ${caches.total_count}`);
          console.log(`Game Grid caches: ${gameGridCaches.length}`);
          
          if (gameGridCaches.length > 0) {
            const latest = gameGridCaches[0];
            console.log(`Latest cache: ${latest.key}`);
            console.log(`Cache size: ${(latest.size_in_bytes / 1024 / 1024).toFixed(2)} MB`);
            console.log(`Created: ${latest.created_at}`);
            console.log(`Last accessed: ${latest.last_accessed_at}`);
            console.log(`Cache ID: ${latest.id}`);
            console.log(`Version: ${latest.version}`);
            console.log(`Git ref: ${latest.ref}`);
          }
          
          // Alert if cache is getting too large (>500MB)
          if (gameGridCaches.length > 0 && gameGridCaches[0].size_in_bytes > 500 * 1024 * 1024) {
            console.log('⚠️ WARNING: Cache size is getting large!');
          }
          
          // Alert if we have too many caches
          if (gameGridCaches.length > 10) {
            console.log('⚠️ WARNING: Too many caches stored!');
          }
          
          // Show summary of all caches
          if (gameGridCaches.length > 0) {
            console.log('\n--- All Game Grid Caches ---');
            gameGridCaches.forEach((cache, index) => {
              console.log(`${index + 1}. ${cache.key} (${(cache.size_in_bytes / 1024 / 1024).toFixed(2)} MB) - ${cache.created_at}`);
            });
          }
          
          // Calculate total cache usage
          const totalCacheSize = gameGridCaches.reduce((total, cache) => total + cache.size_in_bytes, 0);
          console.log(`\nTotal Game Grid cache usage: ${(totalCacheSize / 1024 / 1024).toFixed(2)} MB`);