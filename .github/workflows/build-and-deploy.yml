name: Build and Deploy Game Grid
permissions:
  contents: read
  id-token: write
  pages: write

on:
  # Run every 8 hours
  schedule:
    - cron: '0 */8 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on pushes to main (for development)
  push:
    branches: [ main ]
    paths:
      - 'game-grid/build/**'
      - 'game-grid/src/**'
      - '.github/workflows/**'

env:
  DATA_URL: ${{ secrets.DATA_URL }}
  NODE_VERSION: '22'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./game-grid

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # We don't need full history for Pages deployment
        fetch-depth: 0


    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'


    - name: Install dependencies
      run: npm ci

    - name: Create cache directories
      run: |
        mkdir -p cache/images
        mkdir -p dist/data

    - name: Restore build cache
      uses: actions/cache@v3
      with:
        path: |
          game-grid/cache/
          game-grid/node_modules/.cache
        key: game-grid-cache-${{ hashFiles('**/package-lock.json') }}-${{ github.run_number }}
        restore-keys: |
          game-grid-cache-${{ hashFiles('**/package-lock.json') }}-
          game-grid-cache-

    - name: Check cache status
      run: |
        echo "Cache directory contents:"
        ls -la cache/ || echo "Cache directory is empty"
        echo "Image cache count:"
        ls -1 cache/images/ 2>/dev/null | wc -l || echo "0"
        echo "Cache size:"
        du -sh cache/ 2>/dev/null || echo "0B"

    - name: Build static site
      run: npm run build
      env:
        DATA_URL: ${{ env.DATA_URL }}

    - name: Display build statistics
      run: |
        echo "Build completed successfully!"
        echo "Generated files:"
        ls -la dist/
        echo "Data files:"
        ls -la dist/data/
        echo "Final cache size:"
        du -sh cache/
        echo "Total images cached:"
        ls -1 cache/images/ | wc -l
        echo "Metadata:"
        cat dist/data/metadata.json | jq '.'

    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './game-grid/dist'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Separate job to clean up old caches (runs weekly)
  cleanup-cache:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0'
    
    steps:
    - name: Cleanup old caches
      uses: actions/github-script@v7
      with:
        script: |
          const KEEP_RECENT_COUNT = 5;
          const MAX_CACHE_AGE_DAYS = 30;
          const CACHE_PATTERN = 'game-grid-cache';
          
          // Get all caches with pagination
          let allCaches = [];
          let page = 1;
          let hasMorePages = true;
          
          while (hasMorePages) {
            const response = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              page: page
            });
            
            allCaches = allCaches.concat(response.data.actions_caches);
            hasMorePages = response.data.actions_caches.length === 100;
            page++;
          }
          
          // Filter to only our target caches
          const targetCaches = allCaches.filter(cache => 
            cache.key.includes(CACHE_PATTERN)
          );
          
          console.log(`Found ${targetCaches.length} ${CACHE_PATTERN} caches`);
          
          if (targetCaches.length === 0) {
            console.log('No target caches found for cleanup');
            return;
          }
          
          // Sort by creation date (newest first)
          const sortedCaches = targetCaches.sort((a, b) => 
            new Date(b.created_at) - new Date(a.created_at)
          );
          
          // Find caches to delete based on two criteria:
          // 1. Keep only the N most recent caches
          // 2. Delete caches older than MAX_CACHE_AGE_DAYS
          const now = new Date();
          const cutoffDate = new Date(now.getTime() - (MAX_CACHE_AGE_DAYS * 24 * 60 * 60 * 1000));
          
          const cachesToDelete = sortedCaches.filter((cache, index) => {
            const cacheDate = new Date(cache.created_at);
            const tooOld = cacheDate < cutoffDate;
            const exceedsLimit = index >= KEEP_RECENT_COUNT;
            return tooOld || exceedsLimit;
          });
          
          console.log(`Keeping ${Math.min(KEEP_RECENT_COUNT, sortedCaches.length)} most recent caches`);
          console.log(`Deleting ${cachesToDelete.length} caches (old or excess)`);
          
          if (cachesToDelete.length === 0) {
            console.log('No caches need cleanup');
            return;
          }
          
          // Calculate space to be freed
          const totalSizeToDelete = cachesToDelete.reduce((sum, cache) => sum + cache.size_in_bytes, 0);
          console.log(`Space to be freed: ${(totalSizeToDelete / 1024 / 1024).toFixed(2)} MB`);
          
          // Delete caches
          let deletedCount = 0;
          let errors = [];
          
          for (const cache of cachesToDelete) {
            try {
              const cacheAge = Math.floor((now - new Date(cache.created_at)) / (1000 * 60 * 60 * 24));
              console.log(`Deleting cache: ${cache.key} (${cacheAge} days old, ${(cache.size_in_bytes / 1024 / 1024).toFixed(2)} MB)`);
              
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              });
              deletedCount++;
            } catch (error) {
              console.error(`Failed to delete cache ${cache.key}: ${error.message}`);
              errors.push({ cache: cache.key, error: error.message });
            }
          }
          
          console.log(`\nCleanup Summary:`);
          console.log(`- Successfully deleted: ${deletedCount} caches`);
          console.log(`- Errors: ${errors.length}`);
          console.log(`- Space freed: ${(totalSizeToDelete / 1024 / 1024).toFixed(2)} MB`);
          console.log(`- Remaining caches: ${sortedCaches.length - deletedCount}`);
          
          if (errors.length > 0) {
            console.log('\nErrors encountered:');
            errors.forEach(err => console.log(`- ${err.cache}: ${err.error}`));
            core.setFailed(`Failed to delete ${errors.length} caches`);
          }